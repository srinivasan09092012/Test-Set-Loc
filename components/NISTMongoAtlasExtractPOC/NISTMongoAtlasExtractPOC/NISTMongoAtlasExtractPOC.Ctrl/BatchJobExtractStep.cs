//-----------------------------------------------------------------------------------------
// This code is the property of Gainwell Technologies, Copyright (c) 2021. All rights reserved. 
//
// Any unauthorized use in whole or in part without written consent is strictly prohibited.
// Violators may be punished to the full extent of the law.
//-----------------------------------------------------------------------------------------
using HP.HSP.UA3.BatchProcessingFactory.Core.Batch;
using HP.HSP.UA3.Core.BAS.CQRS.Base;
using HP.HSP.UA3.Core.BAS.CQRS.UserMeta;
using HPE.HSP.UA3.Core.API.Logger;
using NISTMongoAtlasExtractPOC.Ctrl;
using System;
using System.Collections.Generic;

namespace NISTMongoAtlasExtractPOC.Ctrl
{
    public class BatchJobExtractStep : PipelineServiceBase, IBatchStep
    {
        private CommandLineOptions options;
        private string moduleName;
        private string applicationName;
        private string correlationId;
        private string evidenceVault;
        private List<string> messages;
        private Dictionary<string, object> forwardparms;
        private INotificationHelper notificationHelper;

        public BatchJobExtractStep()
        {
            this.notificationHelper = new NotificationHelper();
        }

        public BatchJobExtractStep(INotificationHelper notificationHelper)
        {
            this.notificationHelper = notificationHelper;
        }

        public Dictionary<string, object> ForwardParms
        {
            get
            {
                return this.forwardparms;
            }
        }

        public List<string> ResultMessages
        {
            get
            {
                return this.messages;
            }
        }

        public void Execute()
        {
            try
            {
                var stopwatch = System.Diagnostics.Stopwatch.StartNew();

                // Create collection of files that were generated by the FetchExtracts process
                
                // This is then provided to the evidence vault upload process
                List<HelperClasses.FilePath> extractDirs = new List<HelperClasses.FilePath>();
                MongoAtlasExtractProcess process = new MongoAtlasExtractProcess(ref extractDirs);
                UploadExtractsProcess uploadProcess = new UploadExtractsProcess(ref extractDirs);

                process.FetchExtracts();
                uploadProcess.UploadExtracts();
                //// (awaiting Pulse fix for Atlas) 
                //// this.notificationHelper.PostEvent("NISTMongoAtlasExtractPOC BatchJob Completed", this.options.TenantId.ToString(), "All MongoDB Atlas Extracts have been processed for " + process.StartDate + "-" + process.EndDate + ".");
            }
            catch (Exception ex)
            {
                LoggerManager.Logger.LogInformational(ex.ToString());
            }
        }

        public void Initialize(Dictionary<string, object> parms)
        {
            object value;
            parms.TryGetValue("CommandLineOptions", out value);
            this.options = value as CommandLineOptions;
            parms.TryGetValue("ModuleName", out value);
            this.moduleName = value as string;
            parms.TryGetValue("ApplicationName", out value);
            this.applicationName = value as string;
            parms.TryGetValue(CoreConstants.Thread.CorrelationId, out value);
            this.correlationId = value as string;
            parms.TryGetValue("EvidenceVault", out value);
            this.evidenceVault = value as string;
            this.forwardparms = parms;
            this.messages = new List<string>();
        }
    }
}
